openapi: "3.0.0"
info:
  version: 1.0.0
  title: Web API Demo for rabbitmq
servers:
- url: https://localhost:8182{basePath}
  description: Local development server
  variables:
    basePath:
      default: "/"
tags:
- name: Test
- name: Healthcheck
- name: Monitoring
- name: Command
- name: pets
paths:
  /ping:
    get:
      tags:
      - Test
      - Healthcheck
      - Monitoring
      summary: This is for test purpose only.
      description: 'Reply pong.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  echo:
                    type: string
                    description: The pong response
                example:
                  echo: pong
  /hello/{name}:
    get:
      tags:
      - name: Command
      summary: A hello command.
      description: 'Say hello to someone.'
      parameters:
        - name: name
          in: query
          description: The name of the one to say hello to.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success
  /custom/{routingkey}:
    get:
      tags:
      - name: Command
      summary: Create a message.
      description: 'Send a message to the exchange using the givent routing key.'
      parameters:
        - name: routingkey
          in: query
          description: The routing key for the message.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
